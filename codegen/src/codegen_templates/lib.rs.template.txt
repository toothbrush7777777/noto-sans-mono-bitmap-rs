//! Provides pre-rasterized characters from the "Noto Sans Mono" font in different sizes and font
//! weights for multiple unicode ranges. This crate is `no_std` and needs no allocations or floating
//! point operations. Useful in kernels and bootloaders when only "soft-float" is available. Strictly
//! speaking, this crate is more than a basic bitmap font, because it encodes each pixel as a byte
//! and not as a bit, which results in a much nicer result on the screen.
//!
//! * Original font files taken from: <https://fonts.google.com/noto/specimen/Noto+Sans+Mono>
//! * License: SIL Open Font License (OFL) <https://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL>
//!
//! ## TL;DR
//! * ✅ `no_std`, zero allocations, no floating point operations
//! * ✅ most important symbols, numbers, and letters as pre-rasterized bitmap. Unicode-ranges are selectable.
//! * ✅ Noto Sans Mono font as base
//! * ✅ different sizes and font weights (light, normal, bold)
//! * ✅ nice anti-aliasing/smoothing and better looking than legacy bitmap fonts
//! * ✅ every pixel is encoded in a byte (0-255) and not a bit, which results in a much nicer result on the screen.
//! * ✅ relevant font sizes, such as 14, 16, 24, 32, and 64px (as optional build time features)
//! * ✅ zero dependencies
//!
//! ## Terminology: Is Bitmap Font The Right Term?
//! Legacy (8x8) bitmap fonts usually refer to a font where each symbol is encoded in 8 bytes. The ones in a byte
//! (`0b00110000`) means "pixel on" and the zeroes' means "pixel off". However, my bitmap font actually encodes the
//! intensity of each pixel as a byte from 0 to 255. Hence, this is less size efficient than legacy bitmap fonts,
//! but looks much better. I still use the term bitmap font, because that term is used and known when talking
//! about pre-rasterized fonts/font rendering in an early stage of the boot process.
//!
//! ## When To Use This Crate
//! If you develop a kernel, you usually don't want to use the FPU (i.e. only soft float),
//! because otherwise you need to save the floating point registers on every context switch,
//! which is expensive. Because nice font rendering of TTF fonts heavily relies on many
//! floating point operations, this is not optimal inside a kernel (noticeable performance penalties).
//! Furthermore, in my experience it was hard to get some of the popular font rasterization
//! crates to compile with CPU features "+soft-float" and "-sse" (at least on x86_64).
//!
//! Legacy 8x8 bitmap fonts are ugly when printed to the screen. My crate can be seen as a nice
//! replacement with very nice anti-aliasing.
//!
//! If you have a standard environment or support for floating point operations, you might want
//! to rasterize the font by yourself with the crate `fontdue` and some TTF fonts rather than
//! using my crate.
//!
//! ## Minimal Code Example
//! ```rust
//! use noto_sans_mono_bitmap::{get_raster, get_raster_width, RasterHeight, FontWeight};
//!
//! // Minimal example.
//!
//! let width = get_raster_width(FontWeight::Regular, RasterHeight::Size16);
//! println!(
//!     "Each char of the mono-spaced font will be {}px in width if the font \
//!      weight={:?} and the bitmap height={}",
//!     width,
//!     FontWeight::Regular,
//!     RasterHeight::Size16.val()
//! );
//! let bitmap_char = get_raster('A', FontWeight::Regular, RasterHeight::Size16).expect("unsupported char");
//! println!("{:?}", bitmap_char);
//! for (row_i, row) in bitmap_char.bitmap().iter().enumerate() {
//!     for (col_i, pixel) in row.iter().enumerate() {
//!         println!("[{:02}][{:02}]: {:03}", row_i, col_i, pixel);
//!     }
//! }
//! ```
//!
//! ## Cargo Features and Crate Size
//! By default, only a reasonable subset of possible features is included. The raw crate-size is a few
//! MiB in size but after compilation and discarding irrelevant parts (i.e., size 14, regular font,
//! only ASCII), the overhead should be at less than 120 KiB in binary size, according to my
//! measurements. The compiler can reliably discard unused sizes or weights, but not so for unicode
//! ranges. Thus, it is recommended to include no more features than necessary.
//!
//! With all features included inside the binary, and without any discarding by the compiler, you
//! can expect 5 or more MiB of memory requirements. However, this would require the rather unlikely
//! case that you use different sizes and font weights simulatnously. etc.
//!
//! For a full support of all unicode ranges, use an on-the-fly rasterization process instead of this
//! crate.


// # THIS FILE GETS AUTO GENERATED BY THE PROJECT IN "../codegen" (see repository!)

#![no_std]
#![deny(
    clippy::all,
    clippy::cargo,
    clippy::nursery,
    // clippy::restriction,
    // clippy::pedantic
)]
// now allow a few rules which are denied by the above statement
// --> they are ridiculous and not necessary
#![allow(
    clippy::suboptimal_flops,
    clippy::redundant_pub_crate,
    clippy::fallible_impl_from
)]
#![deny(missing_debug_implementations)]
#![deny(rustdoc::all)]

// # THIS FILE GETS AUTO GENERATED BY THE PROJECT IN "../codegen" (see repository!)

// %CODEGEN_LIB_MODULES%

/// Describes the relevant information for a rendered char of the bitmap font.
///
/// To see why the term "bitmap" is used, see section Terminology in the README.
#[derive(Debug)]
pub struct BitmapChar {
    /// The actual font data that is `height` * `width` bytes in size.
    /// Each byte describes the intensity of a pixel from 0 to 255.
    ///
    /// To see why the term "bitmap" is used, see section Terminology in the README.
    bitmap: &'static [&'static [u8]],
    /// Height of the bitmap box. The actual font size is slightly smaller.
    height: usize,
    /// The width of the bitmap char. It is guaranteed, that all chars
    /// of the same font weight and bitmap height also have the same width
    /// (as you would expect from a mono font.)
    width: usize,
}

impl BitmapChar {
    /// The actual font data that is `height` * `width` bytes in size.
    /// Each byte describes the intensity of a pixel from 0 to 255.
    #[inline]
    pub const fn bitmap(&self) -> &'static [&'static [u8]] {
        self.bitmap
    }

    /// Height of the bitmap box. The actual font size is slightly smaller.
    #[inline]
    pub const fn height(&self) -> usize {
        self.height
    }

    /// The width of the bitmap char. It is guaranteed, that all chars
    /// of the same font weight and bitmap height also have the same width
    /// (as you would expect from a mono font).
    #[inline]
    pub const fn width(&self) -> usize {
        self.width
    }
}

/// Supported font weights.
///
/// The available variants depend on the selected Cargo build features.
#[derive(Debug, Copy, Clone)]
#[repr(usize)]
pub enum FontWeight {
    // %CODEGEN_FONT_WEIGHT_VARIANTS%
}

impl FontWeight {
    /// Returns the numeric value of the enum variant.
    #[inline]
    pub const fn val(self) -> usize {
        self as _
    }
}

/// The height of the bitmap font. The font size will be a a few
/// percent less, because each bitmap letter contains vertical padding
/// for proper alignment of chars (i.e. ÄyA). The width of each bitmap
/// character will be also less than the height, because there is no
/// horizontal padding included.
///
/// The available variants depend on the selected Cargo build features.
///
/// To see why the term "bitmap" is used, see section Terminology in the README.
#[derive(Debug, Clone, Copy)]
#[repr(usize)]
pub enum RasterHeight {
    // %CODEGEN_BITMAP_SIZE_ENUM_VARIANTS%
}

impl RasterHeight {
    /// Returns the numeric value of the variant.
    #[inline]
    pub const fn val(self) -> usize {
        self as _
    }
}

/// Returns a [`BitmapChar`] for the given char, [`FontWeight`], and [`RasterHeight`].
///
/// Returns None, if the given char is not known by the bitmap font. In this case,
/// you could fall back to `get_raster(' ', ...)`.
///
/// To see why the term "bitmap" is used, see section Terminology in the README.
#[inline]
pub fn get_raster(c: char, style: FontWeight, size: RasterHeight) -> Option<BitmapChar> {
    let bitmap = match style {
// %CODEGEN_get_raster%
    };

    bitmap.map(|bitmap| BitmapChar {
        bitmap,
        height: size.val(),
        width: get_raster_width(style, size),
    })
}

/// Returns the width in pixels a char will occupy on the screen. The width is constant for all
/// characters regarding the same combination of [`FontWeight`] and [`RasterHeight`]. The width is
/// a few percent smaller than the height of each char
///
/// To see why the term "bitmap" is used, see section Terminology in the README.
#[inline]
pub const fn get_raster_width(style: FontWeight, size: RasterHeight) -> usize {
    match style {
// %CODEGEN_get_raster_WIDTH%
    }
}

// # THIS FILE GETS AUTO GENERATED BY THE PROJECT IN "../codegen" (see repository!)
